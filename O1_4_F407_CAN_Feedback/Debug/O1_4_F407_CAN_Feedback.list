
O1_4_F407_CAN_Feedback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003700  08003700  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003708  08003708  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003710  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009103  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b7  00000000  00000000  0000e13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  000102f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000065b  00000000  00000000  00010bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bba  00000000  00000000  00011213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac87  00000000  00000000  00033dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd4a8  00000000  00000000  0003ea54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010befc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021b8  00000000  00000000  0010bf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0010e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036d0 	.word	0x080036d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036d0 	.word	0x080036d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000504:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	e00a      	b.n	8000522 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	89fb      	ldrh	r3, [r7, #14]
 8000518:	1a9b      	subs	r3, r3, r2
 800051a:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	3301      	adds	r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	3b02      	subs	r3, #2
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbef      	blt.n	800050c <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	321e      	adds	r2, #30
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	4293      	cmp	r3, r2
 8000538:	d109      	bne.n	800054e <iBus_Check_CHKSUM+0x5a>
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	321f      	adds	r2, #31
 8000544:	7812      	ldrb	r2, [r2, #0]
 8000546:	4293      	cmp	r3, r2
 8000548:	d101      	bne.n	800054e <iBus_Check_CHKSUM+0x5a>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <iBus_Check_CHKSUM+0x5c>
 800054e:	2300      	movs	r3, #0
 8000550:	b2db      	uxtb	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3302      	adds	r3, #2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b21a      	sxth	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3303      	adds	r3, #3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b21b      	sxth	r3, r3
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000586:	b29a      	uxth	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b21a      	sxth	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3305      	adds	r3, #5
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b21b      	sxth	r3, r3
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3306      	adds	r3, #6
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3307      	adds	r3, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b21b      	sxth	r3, r3
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3308      	adds	r3, #8
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b21a      	sxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3309      	adds	r3, #9
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	330a      	adds	r3, #10
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b21a      	sxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	330b      	adds	r3, #11
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b21b      	sxth	r3, r3
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000616:	b29a      	uxth	r2, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	330c      	adds	r3, #12
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b21a      	sxth	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	330d      	adds	r3, #13
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b21b      	sxth	r3, r3
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b21b      	sxth	r3, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800063a:	b29a      	uxth	r2, r3
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	330e      	adds	r3, #14
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b21a      	sxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	330f      	adds	r3, #15
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b21b      	sxth	r3, r3
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800065e:	b29a      	uxth	r2, r3
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330d      	adds	r3, #13
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	091b      	lsrs	r3, r3, #4
 800066c:	b2da      	uxtb	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	751a      	strb	r2, [r3, #20]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_CAN1_Init+0x98>)
 8000688:	4a24      	ldr	r2, [pc, #144]	@ (800071c <MX_CAN1_Init+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <MX_CAN1_Init+0x98>)
 800068e:	2206      	movs	r2, #6
 8000690:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_CAN1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_CAN1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006a0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80006a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d2:	4811      	ldr	r0, [pc, #68]	@ (8000718 <MX_CAN1_Init+0x98>)
 80006d4:	f000 fd3a 	bl	800114c <HAL_CAN_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006de:	f000 fa1b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef CAN_Filter_Config;
  CAN_Filter_Config.FilterActivation = CAN_FILTER_ENABLE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	623b      	str	r3, [r7, #32]
  CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
  CAN_Filter_Config.SlaveStartFilterBank = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24

  // ID 0x00000F65
  CAN_Filter_Config.FilterBank = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  CAN_Filter_Config.FilterIdHigh = (CAN_ID(VESC1,MSG_TYPE_HALL) << 3 | 0x04) >> 16;
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
  CAN_Filter_Config.FilterIdLow =  (CAN_ID(VESC1,MSG_TYPE_HALL) << 3 | 0x04) & 0xFFFF;
 80006fe:	f64d 2304 	movw	r3, #55812	@ 0xda04
 8000702:	607b      	str	r3, [r7, #4]
  HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config);
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <MX_CAN1_Init+0x98>)
 800070a:	f000 fe1b 	bl	8001344 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000040 	.word	0x20000040
 800071c:	40006400 	.word	0x40006400

08000720 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <MX_CAN2_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_CAN2_Init+0x64>)
 800072c:	2206      	movs	r2, #6
 800072e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_CAN2_Init+0x64>)
 800073e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000742:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000746:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800074a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_CAN2_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_CAN2_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_CAN2_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_CAN2_Init+0x64>)
 8000772:	f000 fceb 	bl	800114c <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f9cc 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000068 	.word	0x20000068
 8000788:	40006800 	.word	0x40006800

0800078c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	@ 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a4a      	ldr	r2, [pc, #296]	@ (80008d4 <HAL_CAN_MspInit+0x148>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d146      	bne.n	800083c <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	@ (80008d8 <HAL_CAN_MspInit+0x14c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a48      	ldr	r2, [pc, #288]	@ (80008d8 <HAL_CAN_MspInit+0x14c>)
 80007b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007b8:	4b47      	ldr	r3, [pc, #284]	@ (80008d8 <HAL_CAN_MspInit+0x14c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d10d      	bne.n	80007dc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	4b45      	ldr	r3, [pc, #276]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d0:	4b42      	ldr	r3, [pc, #264]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e4:	4a3d      	ldr	r2, [pc, #244]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ec:	4b3b      	ldr	r3, [pc, #236]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800080a:	2309      	movs	r3, #9
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4832      	ldr	r0, [pc, #200]	@ (80008e0 <HAL_CAN_MspInit+0x154>)
 8000816:	f001 fb41 	bl	8001e9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2014      	movs	r0, #20
 8000820:	f001 fb05 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000824:	2014      	movs	r0, #20
 8000826:	f001 fb1e 	bl	8001e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2015      	movs	r0, #21
 8000830:	f001 fafd 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000834:	2015      	movs	r0, #21
 8000836:	f001 fb16 	bl	8001e66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800083a:	e047      	b.n	80008cc <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <HAL_CAN_MspInit+0x158>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d142      	bne.n	80008cc <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a23      	ldr	r2, [pc, #140]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 8000850:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000862:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <HAL_CAN_MspInit+0x14c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <HAL_CAN_MspInit+0x14c>)
 800086a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800086c:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <HAL_CAN_MspInit+0x14c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d10d      	bne.n	8000890 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a17      	ldr	r2, [pc, #92]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	4a10      	ldr	r2, [pc, #64]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <HAL_CAN_MspInit+0x150>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008ac:	2360      	movs	r3, #96	@ 0x60
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80008bc:	2309      	movs	r3, #9
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <HAL_CAN_MspInit+0x154>)
 80008c8:	f001 fae8 	bl	8001e9c <HAL_GPIO_Init>
}
 80008cc:	bf00      	nop
 80008ce:	3730      	adds	r7, #48	@ 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40006400 	.word	0x40006400
 80008d8:	20000090 	.word	0x20000090
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40006800 	.word	0x40006800

080008e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008f4:	4907      	ldr	r1, [pc, #28]	@ (8000914 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40023800 	.word	0x40023800

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800091c:	2080      	movs	r0, #128	@ 0x80
 800091e:	f7ff ffe3 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff ffe0 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000928:	2004      	movs	r0, #4
 800092a:	f7ff ffdd 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800092e:	2008      	movs	r0, #8
 8000930:	f7ff ffda 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff ffd7 	bl	80008e8 <LL_AHB1_GRP1_EnableClock>

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800093e:	b480      	push	{r7}
 8000940:	b089      	sub	sp, #36	@ 0x24
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	330c      	adds	r3, #12
 800094a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	e853 3f00 	ldrex	r3, [r3]
 8000952:	60bb      	str	r3, [r7, #8]
   return(result);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	f043 0320 	orr.w	r3, r3, #32
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	330c      	adds	r3, #12
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	61ba      	str	r2, [r7, #24]
 8000964:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000966:	6979      	ldr	r1, [r7, #20]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	e841 2300 	strex	r3, r2, [r1]
 800096e:	613b      	str	r3, [r7, #16]
   return(result);
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1e7      	bne.n	8000946 <LL_USART_EnableIT_RXNE+0x8>
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3724      	adds	r7, #36	@ 0x24
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fb6e 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f830 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f7ff ffc2 	bl	8000918 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000994:	f7ff fe74 	bl	8000680 <MX_CAN1_Init>
  MX_UART5_Init();
 8000998:	f000 fac4 	bl	8000f24 <MX_UART5_Init>
  MX_CAN2_Init();
 800099c:	f7ff fec0 	bl	8000720 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(UART5); // bat ngat ibus
 80009a0:	480e      	ldr	r0, [pc, #56]	@ (80009dc <main+0x58>)
 80009a2:	f7ff ffcc 	bl	800093e <LL_USART_EnableIT_RXNE>

  HAL_CAN_Start(&hcan1);
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <main+0x5c>)
 80009a8:	f000 fdaa 	bl	8001500 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009ac:	2102      	movs	r1, #2
 80009ae:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <main+0x5c>)
 80009b0:	f000 ff0c 	bl	80017cc <HAL_CAN_ActivateNotification>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Check Connect IBus
	if(ibus_rx_cplt_flag == 1)
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <main+0x60>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d1fb      	bne.n	80009b4 <main+0x30>
	{
	  ibus_rx_cplt_flag = 0;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <main+0x60>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
	  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 80009c2:	2120      	movs	r1, #32
 80009c4:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <main+0x64>)
 80009c6:	f7ff fd95 	bl	80004f4 <iBus_Check_CHKSUM>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d1f1      	bne.n	80009b4 <main+0x30>
	  {
		  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80009d0:	4906      	ldr	r1, [pc, #24]	@ (80009ec <main+0x68>)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <main+0x64>)
 80009d4:	f7ff fdc3 	bl	800055e <iBus_Parsing>
	if(ibus_rx_cplt_flag == 1)
 80009d8:	e7ec      	b.n	80009b4 <main+0x30>
 80009da:	bf00      	nop
 80009dc:	40005000 	.word	0x40005000
 80009e0:	20000040 	.word	0x20000040
 80009e4:	200000c0 	.word	0x200000c0
 80009e8:	200000a0 	.word	0x200000a0
 80009ec:	20000028 	.word	0x20000028

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	@ 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 fe3a 	bl	8003678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a27      	ldr	r2, [pc, #156]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b22      	ldr	r3, [pc, #136]	@ (8000ac0 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a64:	23a8      	movs	r3, #168	@ 0xa8
 8000a66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fbad 	bl	80021d4 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 f84a 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fe0e 	bl	80026c4 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aae:	f000 f833 	bl	8000b18 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	@ 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	f107 0214 	add.w	r2, r7, #20
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	480e      	ldr	r0, [pc, #56]	@ (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000ad8:	f000 fd56 	bl	8001588 <HAL_CAN_GetRxMessage>

	if (rxHeader.IDE == CAN_ID_EXT) {
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d111      	bne.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		switch (rxHeader.ExtId) {
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	f640 7266 	movw	r2, #3942	@ 0xf66
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d00b      	beq.n	8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8000aec:	f5b3 5fda 	cmp.w	r3, #6976	@ 0x1b40
 8000af0:	d109      	bne.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			case CAN_ID(VESC1,MSG_TYPE_HALL):
				memcpy(data1.data, rxData, 8);
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000af4:	461a      	mov	r2, r3
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000afe:	e882 0003 	stmia.w	r2, {r0, r1}
				break;
 8000b02:	e000      	b.n	8000b06 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			case 0xF66:

				break;
 8000b04:	bf00      	nop
		}
	}
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000040 	.word	0x20000040
 8000b14:	20000094 	.word	0x20000094

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <LL_USART_IsActiveFlag_RXNE>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0320 	and.w	r3, r3, #32
 8000b84:	2b20      	cmp	r3, #32
 8000b86:	bf0c      	ite	eq
 8000b88:	2301      	moveq	r3, #1
 8000b8a:	2300      	movne	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <LL_USART_ClearFlag_RXNE>:
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f06f 0220 	mvn.w	r2, #32
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	b2db      	uxtb	r3, r3
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 fa71 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <CAN1_RX0_IRQHandler+0x10>)
 8000c36:	f000 fdef 	bl	8001818 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000040 	.word	0x20000040

08000c44 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <CAN1_RX1_IRQHandler+0x10>)
 8000c4a:	f000 fde5 	bl	8001818 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000040 	.word	0x20000040

08000c58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8000c5c:	4832      	ldr	r0, [pc, #200]	@ (8000d28 <UART5_IRQHandler+0xd0>)
 8000c5e:	f7ff ff89 	bl	8000b74 <LL_USART_IsActiveFlag_RXNE>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d05c      	beq.n	8000d22 <UART5_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8000c68:	482f      	ldr	r0, [pc, #188]	@ (8000d28 <UART5_IRQHandler+0xd0>)
 8000c6a:	f7ff ff96 	bl	8000b9a <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8000c6e:	482e      	ldr	r0, [pc, #184]	@ (8000d28 <UART5_IRQHandler+0xd0>)
 8000c70:	f7ff ffa1 	bl	8000bb6 <LL_USART_ReceiveData8>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000c7a:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <UART5_IRQHandler+0xd8>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b1f      	cmp	r3, #31
 8000c88:	d02e      	beq.n	8000ce8 <UART5_IRQHandler+0x90>
 8000c8a:	2b1f      	cmp	r3, #31
 8000c8c:	dc3a      	bgt.n	8000d04 <UART5_IRQHandler+0xac>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <UART5_IRQHandler+0x40>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d012      	beq.n	8000cbc <UART5_IRQHandler+0x64>
 8000c96:	e035      	b.n	8000d04 <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d13f      	bne.n	8000d20 <UART5_IRQHandler+0xc8>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000ca8:	7819      	ldrb	r1, [r3, #0]
 8000caa:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <UART5_IRQHandler+0xe0>)
 8000cac:	5499      	strb	r1, [r3, r2]
				cnt++;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cb8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cba:	e031      	b.n	8000d20 <UART5_IRQHandler+0xc8>
		case 1:
			if(uart5_rx_data == 0x40)
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b40      	cmp	r3, #64	@ 0x40
 8000cc2:	d10d      	bne.n	8000ce0 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000ccc:	7819      	ldrb	r1, [r3, #0]
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <UART5_IRQHandler+0xe0>)
 8000cd0:	5499      	strb	r1, [r3, r2]
				cnt++;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cdc:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8000cde:	e020      	b.n	8000d22 <UART5_IRQHandler+0xca>
				cnt = 0;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
			break;
 8000ce6:	e01c      	b.n	8000d22 <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000cf0:	7819      	ldrb	r1, [r3, #0]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <UART5_IRQHandler+0xe0>)
 8000cf4:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <UART5_IRQHandler+0xe4>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
			break;
 8000d02:	e00e      	b.n	8000d22 <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <UART5_IRQHandler+0xd4>)
 8000d0c:	7819      	ldrb	r1, [r3, #0]
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <UART5_IRQHandler+0xe0>)
 8000d10:	5499      	strb	r1, [r3, r2]
			cnt++;
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <UART5_IRQHandler+0xdc>)
 8000d1c:	701a      	strb	r2, [r3, #0]
			break;
 8000d1e:	e000      	b.n	8000d22 <UART5_IRQHandler+0xca>
			break;
 8000d20:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005000 	.word	0x40005000
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	2000009d 	.word	0x2000009d
 8000d34:	200000c1 	.word	0x200000c1
 8000d38:	200000a0 	.word	0x200000a0
 8000d3c:	200000c0 	.word	0x200000c0

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	@ (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	@ (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	@ (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_USART_Enable>:
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60da      	str	r2, [r3, #12]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_USART_ConfigAsyncMode>:
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	615a      	str	r2, [r3, #20]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <LL_AHB1_GRP1_EnableClock>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed0:	4907      	ldr	r1, [pc, #28]	@ (8000ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f00:	4907      	ldr	r1, [pc, #28]	@ (8000f20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	@ 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
 8000f4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8000f4e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000f52:	f7ff ffcf 	bl	8000ef4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f56:	2004      	movs	r0, #4
 8000f58:	f7ff ffb4 	bl	8000ec4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000f5c:	2008      	movs	r0, #8
 8000f5e:	f7ff ffb1 	bl	8000ec4 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4821      	ldr	r0, [pc, #132]	@ (8001008 <MX_UART5_Init+0xe4>)
 8000f82:	f001 fed6 	bl	8002d32 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000f86:	2304      	movs	r3, #4
 8000f88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481a      	ldr	r0, [pc, #104]	@ (800100c <MX_UART5_Init+0xe8>)
 8000fa4:	f001 fec5 	bl	8002d32 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fa8:	f7ff fedc 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff2c 	bl	8000e10 <NVIC_EncodePriority>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2035      	movs	r0, #53	@ 0x35
 8000fbe:	f7ff fefd 	bl	8000dbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8000fc2:	2035      	movs	r0, #53	@ 0x35
 8000fc4:	f7ff fedc 	bl	8000d80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000fc8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000fcc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	4808      	ldr	r0, [pc, #32]	@ (8001010 <MX_UART5_Init+0xec>)
 8000fee:	f002 fac3 	bl	8003578 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8000ff2:	4807      	ldr	r0, [pc, #28]	@ (8001010 <MX_UART5_Init+0xec>)
 8000ff4:	f7ff ff4f 	bl	8000e96 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_UART5_Init+0xec>)
 8000ffa:	f7ff ff3c 	bl	8000e76 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	@ 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020800 	.word	0x40020800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40005000 	.word	0x40005000

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800104c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001018:	f7ff fe92 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f002 fb21 	bl	8003688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fc9d 	bl	8000984 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001058:	08003710 	.word	0x08003710
  ldr r2, =_sbss
 800105c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001060:	200000c8 	.word	0x200000c8

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 fec1 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fd42 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fed9 	bl	8001e82 <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 fea1 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200000c4 	.word	0x200000c4

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200000c4 	.word	0x200000c4

0800114c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0ed      	b.n	800133a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fb0e 	bl	800078c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff ffd8 	bl	8001134 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001186:	e012      	b.n	80011ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001188:	f7ff ffd4 	bl	8001134 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	d90b      	bls.n	80011ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0c5      	b.n	800133a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0e5      	beq.n	8001188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0202 	bic.w	r2, r2, #2
 80011ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff ffb2 	bl	8001134 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011d2:	e012      	b.n	80011fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d4:	f7ff ffae 	bl	8001134 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90b      	bls.n	80011fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2205      	movs	r2, #5
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e09f      	b.n	800133a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e5      	bne.n	80011d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e1b      	ldrb	r3, [r3, #24]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7e5b      	ldrb	r3, [r3, #25]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7e9b      	ldrb	r3, [r3, #26]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0220 	orr.w	r2, r2, #32
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0220 	bic.w	r2, r2, #32
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7edb      	ldrb	r3, [r3, #27]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0210 	bic.w	r2, r2, #16
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7f1b      	ldrb	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0208 	orr.w	r2, r2, #8
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e007      	b.n	80012da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7f5b      	ldrb	r3, [r3, #29]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e007      	b.n	8001304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	ea42 0103 	orr.w	r1, r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d003      	beq.n	8001364 <HAL_CAN_ConfigFilter+0x20>
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b02      	cmp	r3, #2
 8001360:	f040 80be 	bne.w	80014e0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001364:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <HAL_CAN_ConfigFilter+0x1b8>)
 8001366:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800137e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	431a      	orrs	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	2201      	movs	r2, #1
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	401a      	ands	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d123      	bne.n	800140e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	401a      	ands	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3248      	adds	r2, #72	@ 0x48
 80013ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001402:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001404:	6939      	ldr	r1, [r7, #16]
 8001406:	3348      	adds	r3, #72	@ 0x48
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d122      	bne.n	800145c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	431a      	orrs	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001436:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	3248      	adds	r2, #72	@ 0x48
 800143c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001450:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	3348      	adds	r3, #72	@ 0x48
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001476:	e007      	b.n	8001488 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	431a      	orrs	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d109      	bne.n	80014a4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014a2:	e007      	b.n	80014b4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d107      	bne.n	80014cc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014d2:	f023 0201 	bic.w	r2, r3, #1
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	e006      	b.n	80014ee <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40006400 	.word	0x40006400

08001500 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d12e      	bne.n	8001572 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800152c:	f7ff fe02 	bl	8001134 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001532:	e012      	b.n	800155a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001534:	f7ff fdfe 	bl	8001134 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b0a      	cmp	r3, #10
 8001540:	d90b      	bls.n	800155a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001546:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2205      	movs	r2, #5
 8001552:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e012      	b.n	8001580 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e5      	bne.n	8001534 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e006      	b.n	8001580 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
  }
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d003      	beq.n	80015ac <HAL_CAN_GetRxMessage+0x24>
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	f040 8103 	bne.w	80017b2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10e      	bne.n	80015d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d116      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0f7      	b.n	80017c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0e8      	b.n	80017c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	331b      	adds	r3, #27
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4413      	add	r3, r2
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0204 	and.w	r2, r3, #4
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10c      	bne.n	8001626 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	331b      	adds	r3, #27
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	0d5b      	lsrs	r3, r3, #21
 800161c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	e00b      	b.n	800163e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	331b      	adds	r3, #27
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	331b      	adds	r3, #27
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0202 	and.w	r2, r3, #2
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	331b      	adds	r3, #27
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2208      	movs	r2, #8
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	e00b      	b.n	800168c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	331b      	adds	r3, #27
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 020f 	and.w	r2, r3, #15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	331b      	adds	r3, #27
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	331b      	adds	r3, #27
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	3304      	adds	r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0c1b      	lsrs	r3, r3, #16
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	4413      	add	r3, r2
 80016dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	0a1a      	lsrs	r2, r3, #8
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0c1a      	lsrs	r2, r3, #16
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3302      	adds	r3, #2
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0e1a      	lsrs	r2, r3, #24
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3303      	adds	r3, #3
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3304      	adds	r3, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0a1a      	lsrs	r2, r3, #8
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3305      	adds	r3, #5
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0c1a      	lsrs	r2, r3, #16
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	3306      	adds	r3, #6
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0e1a      	lsrs	r2, r3, #24
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3307      	adds	r3, #7
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d108      	bne.n	800179e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0220 	orr.w	r2, r2, #32
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	e007      	b.n	80017ae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0220 	orr.w	r2, r2, #32
 80017ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e006      	b.n	80017c0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
  }
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d002      	beq.n	80017ea <HAL_CAN_ActivateNotification+0x1e>
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d109      	bne.n	80017fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6959      	ldr	r1, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e006      	b.n	800180c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d07c      	beq.n	8001958 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d023      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2201      	movs	r2, #1
 800186e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f983 	bl	8001b86 <HAL_CAN_TxMailbox0CompleteCallback>
 8001880:	e016      	b.n	80018b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
 8001894:	e00c      	b.n	80018b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a8:	e002      	b.n	80018b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f989 	bl	8001bc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d024      	beq.n	8001904 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f963 	bl	8001b9a <HAL_CAN_TxMailbox1CompleteCallback>
 80018d4:	e016      	b.n	8001904 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e8:	e00c      	b.n	8001904 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fc:	e002      	b.n	8001904 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f969 	bl	8001bd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d024      	beq.n	8001958 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001916:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f943 	bl	8001bae <HAL_CAN_TxMailbox2CompleteCallback>
 8001928:	e016      	b.n	8001958 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
 800193c:	e00c      	b.n	8001958 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001950:	e002      	b.n	8001958 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f949 	bl	8001bea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00c      	beq.n	800197c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2208      	movs	r2, #8
 8001996:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f930 	bl	8001bfe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff f884 	bl	8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00c      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2210      	movs	r2, #16
 80019de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2208      	movs	r2, #8
 80019fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f912 	bl	8001c26 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8f9 	bl	8001c12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8fc 	bl	8001c3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8f5 	bl	8001c4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d07b      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d072      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d043      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d03e      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ae6:	2b60      	cmp	r3, #96	@ 0x60
 8001ae8:	d02b      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x32a>
 8001aea:	2b60      	cmp	r3, #96	@ 0x60
 8001aec:	d82e      	bhi.n	8001b4c <HAL_CAN_IRQHandler+0x334>
 8001aee:	2b50      	cmp	r3, #80	@ 0x50
 8001af0:	d022      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x320>
 8001af2:	2b50      	cmp	r3, #80	@ 0x50
 8001af4:	d82a      	bhi.n	8001b4c <HAL_CAN_IRQHandler+0x334>
 8001af6:	2b40      	cmp	r3, #64	@ 0x40
 8001af8:	d019      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x316>
 8001afa:	2b40      	cmp	r3, #64	@ 0x40
 8001afc:	d826      	bhi.n	8001b4c <HAL_CAN_IRQHandler+0x334>
 8001afe:	2b30      	cmp	r3, #48	@ 0x30
 8001b00:	d010      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x30c>
 8001b02:	2b30      	cmp	r3, #48	@ 0x30
 8001b04:	d822      	bhi.n	8001b4c <HAL_CAN_IRQHandler+0x334>
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d002      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x2f8>
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d005      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b0e:	e01d      	b.n	8001b4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b18:	e019      	b.n	8001b4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b22:	e014      	b.n	8001b4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b2c:	e00f      	b.n	8001b4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b36:	e00a      	b.n	8001b4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b40:	e005      	b.n	8001b4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b4a:	e000      	b.n	8001b4e <HAL_CAN_IRQHandler+0x336>
            break;
 8001b4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2204      	movs	r2, #4
 8001b64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f872 	bl	8001c62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	@ 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <__NVIC_SetPriorityGrouping>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff29 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff3e 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff31 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e16b      	b.n	8002190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 815a 	bne.w	800218a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80b4 	beq.w	800218a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b60      	ldr	r3, [pc, #384]	@ (80021a8 <HAL_GPIO_Init+0x30c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	4a5f      	ldr	r2, [pc, #380]	@ (80021a8 <HAL_GPIO_Init+0x30c>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002030:	6453      	str	r3, [r2, #68]	@ 0x44
 8002032:	4b5d      	ldr	r3, [pc, #372]	@ (80021a8 <HAL_GPIO_Init+0x30c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a5b      	ldr	r2, [pc, #364]	@ (80021ac <HAL_GPIO_Init+0x310>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_GPIO_Init+0x314>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_GPIO_Init+0x318>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x222>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a50      	ldr	r2, [pc, #320]	@ (80021b8 <HAL_GPIO_Init+0x31c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4f      	ldr	r2, [pc, #316]	@ (80021bc <HAL_GPIO_Init+0x320>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x21a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4e      	ldr	r2, [pc, #312]	@ (80021c0 <HAL_GPIO_Init+0x324>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4d      	ldr	r2, [pc, #308]	@ (80021c4 <HAL_GPIO_Init+0x328>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x212>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x20e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4b      	ldr	r2, [pc, #300]	@ (80021cc <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x20a>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00e      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020a6:	2308      	movs	r3, #8
 80020a8:	e00c      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020aa:	2306      	movs	r3, #6
 80020ac:	e00a      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e008      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020b2:	2304      	movs	r3, #4
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020b6:	2303      	movs	r3, #3
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x228>
 80020c2:	2300      	movs	r3, #0
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f002 0203 	and.w	r2, r2, #3
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	@ (80021ac <HAL_GPIO_Init+0x310>)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002106:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210c:	4b30      	ldr	r3, [pc, #192]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002130:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002136:	4b26      	ldr	r3, [pc, #152]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215a:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002184:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <HAL_GPIO_Init+0x334>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	f67f ae90 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3724      	adds	r7, #36	@ 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	40020400 	.word	0x40020400
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40021800 	.word	0x40021800
 80021cc:	40021c00 	.word	0x40021c00
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e267      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d075      	beq.n	80022de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021f2:	4b88      	ldr	r3, [pc, #544]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d00c      	beq.n	8002218 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021fe:	4b85      	ldr	r3, [pc, #532]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002206:	2b08      	cmp	r3, #8
 8002208:	d112      	bne.n	8002230 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220a:	4b82      	ldr	r3, [pc, #520]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002216:	d10b      	bne.n	8002230 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	4b7e      	ldr	r3, [pc, #504]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d05b      	beq.n	80022dc <HAL_RCC_OscConfig+0x108>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d157      	bne.n	80022dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e242      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002238:	d106      	bne.n	8002248 <HAL_RCC_OscConfig+0x74>
 800223a:	4b76      	ldr	r3, [pc, #472]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a75      	ldr	r2, [pc, #468]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e01d      	b.n	8002284 <HAL_RCC_OscConfig+0xb0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x98>
 8002252:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6f      	ldr	r2, [pc, #444]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a6c      	ldr	r2, [pc, #432]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0xb0>
 800226c:	4b69      	ldr	r3, [pc, #420]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a68      	ldr	r2, [pc, #416]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b66      	ldr	r3, [pc, #408]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a65      	ldr	r2, [pc, #404]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 800227e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe ff52 	bl	8001134 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7fe ff4e 	bl	8001134 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	@ 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e207      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0xc0>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe ff3e 	bl	8001134 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7fe ff3a 	bl	8001134 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1f3      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	4b51      	ldr	r3, [pc, #324]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0xe8>
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d063      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022f6:	4b47      	ldr	r3, [pc, #284]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d11c      	bne.n	800233c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b44      	ldr	r3, [pc, #272]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d116      	bne.n	800233c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	4b41      	ldr	r3, [pc, #260]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_RCC_OscConfig+0x152>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e1c7      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002326:	4b3b      	ldr	r3, [pc, #236]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4937      	ldr	r1, [pc, #220]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233a:	e03a      	b.n	80023b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002344:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <HAL_RCC_OscConfig+0x244>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe fef3 	bl	8001134 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002352:	f7fe feef 	bl	8001134 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1a8      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4925      	ldr	r1, [pc, #148]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	e015      	b.n	80023b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002386:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <HAL_RCC_OscConfig+0x244>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fed2 	bl	8001134 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002394:	f7fe fece 	bl	8001134 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e187      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d036      	beq.n	800242c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCC_OscConfig+0x248>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7fe feb2 	bl	8001134 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe feae 	bl	8001134 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e167      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x240>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x200>
 80023f2:	e01b      	b.n	800242c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <HAL_RCC_OscConfig+0x248>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fa:	f7fe fe9b 	bl	8001134 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	e00e      	b.n	8002420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002402:	f7fe fe97 	bl	8001134 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d907      	bls.n	8002420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e150      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
 8002414:	40023800 	.word	0x40023800
 8002418:	42470000 	.word	0x42470000
 800241c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b88      	ldr	r3, [pc, #544]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ea      	bne.n	8002402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8097 	beq.w	8002568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b81      	ldr	r3, [pc, #516]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b7d      	ldr	r3, [pc, #500]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4a7c      	ldr	r2, [pc, #496]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
 800245a:	4b7a      	ldr	r3, [pc, #488]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b77      	ldr	r3, [pc, #476]	@ (8002648 <HAL_RCC_OscConfig+0x474>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b74      	ldr	r3, [pc, #464]	@ (8002648 <HAL_RCC_OscConfig+0x474>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a73      	ldr	r2, [pc, #460]	@ (8002648 <HAL_RCC_OscConfig+0x474>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7fe fe57 	bl	8001134 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe fe53 	bl	8001134 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e10c      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b6a      	ldr	r3, [pc, #424]	@ (8002648 <HAL_RCC_OscConfig+0x474>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x2ea>
 80024b0:	4b64      	ldr	r3, [pc, #400]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b4:	4a63      	ldr	r2, [pc, #396]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80024bc:	e01c      	b.n	80024f8 <HAL_RCC_OscConfig+0x324>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x30c>
 80024c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0x324>
 80024e0:	4b58      	ldr	r3, [pc, #352]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e4:	4a57      	ldr	r2, [pc, #348]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ec:	4b55      	ldr	r3, [pc, #340]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f0:	4a54      	ldr	r2, [pc, #336]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80024f2:	f023 0304 	bic.w	r3, r3, #4
 80024f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d015      	beq.n	800252c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fe18 	bl	8001134 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe fe14 	bl	8001134 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0cb      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	4b49      	ldr	r3, [pc, #292]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ee      	beq.n	8002508 <HAL_RCC_OscConfig+0x334>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe fe02 	bl	8001134 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fdfe 	bl	8001134 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e0b5      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254a:	4b3e      	ldr	r3, [pc, #248]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ee      	bne.n	8002534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255c:	4b39      	ldr	r3, [pc, #228]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	4a38      	ldr	r2, [pc, #224]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002566:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80a1 	beq.w	80026b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002572:	4b34      	ldr	r3, [pc, #208]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b08      	cmp	r3, #8
 800257c:	d05c      	beq.n	8002638 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d141      	bne.n	800260a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <HAL_RCC_OscConfig+0x478>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fe fdd2 	bl	8001134 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fdce 	bl	8001134 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e087      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	491b      	ldr	r1, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x478>)
 80025de:	2201      	movs	r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fda7 	bl	8001134 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fda3 	bl	8001134 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e05c      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x416>
 8002608:	e054      	b.n	80026b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_RCC_OscConfig+0x478>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fd90 	bl	8001134 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fd8c 	bl	8001134 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e045      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_RCC_OscConfig+0x470>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x444>
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e038      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
 8002644:	40023800 	.word	0x40023800
 8002648:	40007000 	.word	0x40007000
 800264c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002650:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x4ec>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d028      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d121      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d11a      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	4293      	cmp	r3, r2
 800268a:	d111      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	3b01      	subs	r3, #1
 800269a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0cc      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b68      	ldr	r3, [pc, #416]	@ (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d90c      	bls.n	8002700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b65      	ldr	r3, [pc, #404]	@ (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	@ (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a58      	ldr	r2, [pc, #352]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a52      	ldr	r2, [pc, #328]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800273a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d044      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d003      	beq.n	8002782 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	2b03      	cmp	r3, #3
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002782:	4b3f      	ldr	r3, [pc, #252]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e067      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 0203 	bic.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4934      	ldr	r1, [pc, #208]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fcbe 	bl	8001134 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7fe fcba 	bl	8001134 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e04f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 020c 	and.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d1eb      	bne.n	80027bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d20c      	bcs.n	800280c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b22      	ldr	r3, [pc, #136]	@ (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	@ (8002884 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fc1e 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00
 8002880:	40023800 	.word	0x40023800
 8002884:	080036e8 	.word	0x080036e8
 8002888:	20000000 	.word	0x20000000
 800288c:	20000004 	.word	0x20000004

08002890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002894:	b094      	sub	sp, #80	@ 0x50
 8002896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a8:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d00d      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x40>
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	f200 80e1 	bhi.w	8002a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x34>
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x3a>
 80028c2:	e0db      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028c4:	4b73      	ldr	r3, [pc, #460]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80028c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c8:	e0db      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ca:	4b73      	ldr	r3, [pc, #460]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80028cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ce:	e0d8      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028da:	4b6d      	ldr	r3, [pc, #436]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	2200      	movs	r2, #0
 80028ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028fa:	2300      	movs	r3, #0
 80028fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80028fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	f04f 0000 	mov.w	r0, #0
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	0159      	lsls	r1, r3, #5
 8002910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002914:	0150      	lsls	r0, r2, #5
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4621      	mov	r1, r4
 800291c:	1a51      	subs	r1, r2, r1
 800291e:	6139      	str	r1, [r7, #16]
 8002920:	4629      	mov	r1, r5
 8002922:	eb63 0301 	sbc.w	r3, r3, r1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002934:	4659      	mov	r1, fp
 8002936:	018b      	lsls	r3, r1, #6
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800293e:	4651      	mov	r1, sl
 8002940:	018a      	lsls	r2, r1, #6
 8002942:	4651      	mov	r1, sl
 8002944:	ebb2 0801 	subs.w	r8, r2, r1
 8002948:	4659      	mov	r1, fp
 800294a:	eb63 0901 	sbc.w	r9, r3, r1
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800295e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002962:	4690      	mov	r8, r2
 8002964:	4699      	mov	r9, r3
 8002966:	4623      	mov	r3, r4
 8002968:	eb18 0303 	adds.w	r3, r8, r3
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	462b      	mov	r3, r5
 8002970:	eb49 0303 	adc.w	r3, r9, r3
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002982:	4629      	mov	r1, r5
 8002984:	024b      	lsls	r3, r1, #9
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800298c:	4621      	mov	r1, r4
 800298e:	024a      	lsls	r2, r1, #9
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800299a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800299c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029a0:	f7fd fc12 	bl	80001c8 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ac:	e058      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ae:	4b38      	ldr	r3, [pc, #224]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	099b      	lsrs	r3, r3, #6
 80029b4:	2200      	movs	r2, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	4611      	mov	r1, r2
 80029ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	f04f 0000 	mov.w	r0, #0
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	0159      	lsls	r1, r3, #5
 80029d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029da:	0150      	lsls	r0, r2, #5
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4641      	mov	r1, r8
 80029e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a00:	ebb2 040a 	subs.w	r4, r2, sl
 8002a04:	eb63 050b 	sbc.w	r5, r3, fp
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	00eb      	lsls	r3, r5, #3
 8002a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a16:	00e2      	lsls	r2, r4, #3
 8002a18:	4614      	mov	r4, r2
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	18e3      	adds	r3, r4, r3
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb45 0303 	adc.w	r3, r5, r3
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	61fa      	str	r2, [r7, #28]
 8002a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a54:	f7fd fbb8 	bl	80001c8 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3750      	adds	r7, #80	@ 0x50
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	007a1200 	.word	0x007a1200

08002a9c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b08b      	sub	sp, #44	@ 0x2c
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	613b      	str	r3, [r7, #16]
  return result;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e003      	b.n	8002ace <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	401a      	ands	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	61fb      	str	r3, [r7, #28]
  return result;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	601a      	str	r2, [r3, #0]
}
 8002b0a:	bf00      	nop
 8002b0c:	372c      	adds	r7, #44	@ 0x2c
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	605a      	str	r2, [r3, #4]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b08b      	sub	sp, #44	@ 0x2c
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	613b      	str	r3, [r7, #16]
  return result;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2103      	movs	r1, #3
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e003      	b.n	8002ba6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002bb4:	bf00      	nop
 8002bb6:	372c      	adds	r7, #44	@ 0x2c
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b08b      	sub	sp, #44	@ 0x2c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	613b      	str	r3, [r7, #16]
  return result;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e003      	b.n	8002bf2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	61fb      	str	r3, [r7, #28]
  return result;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	fa01 f303 	lsl.w	r3, r1, r3
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	60da      	str	r2, [r3, #12]
}
 8002c2e:	bf00      	nop
 8002c30:	372c      	adds	r7, #44	@ 0x2c
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b08b      	sub	sp, #44	@ 0x2c
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	613b      	str	r3, [r7, #16]
  return result;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	210f      	movs	r1, #15
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	61fb      	str	r3, [r7, #28]
  return result;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	e003      	b.n	8002c9a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002ca8:	bf00      	nop
 8002caa:	372c      	adds	r7, #44	@ 0x2c
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b08b      	sub	sp, #44	@ 0x2c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	613b      	str	r3, [r7, #16]
  return result;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e003      	b.n	8002ce8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	210f      	movs	r1, #15
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	61fb      	str	r3, [r7, #28]
  return result;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	e003      	b.n	8002d18 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002d26:	bf00      	nop
 8002d28:	372c      	adds	r7, #44	@ 0x2c
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b08a      	sub	sp, #40	@ 0x28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	617b      	str	r3, [r7, #20]
  return result;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <LL_GPIO_Init+0x2e>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002d6a:	e057      	b.n	8002e1c <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d049      	beq.n	8002e16 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d003      	beq.n	8002d92 <LL_GPIO_Init+0x60>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d10d      	bne.n	8002dae <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6a39      	ldr	r1, [r7, #32]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fed3 	bl	8002b46 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6a39      	ldr	r1, [r7, #32]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff feb4 	bl	8002b16 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	461a      	mov	r2, r3
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff02 	bl	8002bc0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d121      	bne.n	8002e08 <LL_GPIO_Init+0xd6>
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	60bb      	str	r3, [r7, #8]
  return result;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <LL_GPIO_Init+0xac>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e003      	b.n	8002de6 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002de6:	2b07      	cmp	r3, #7
 8002de8:	d807      	bhi.n	8002dfa <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	461a      	mov	r2, r3
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ff21 	bl	8002c3a <LL_GPIO_SetAFPin_0_7>
 8002df8:	e006      	b.n	8002e08 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff56 	bl	8002cb4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6a39      	ldr	r1, [r7, #32]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fe43 	bl	8002a9c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	3301      	adds	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1a0      	bne.n	8002d6c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3728      	adds	r7, #40	@ 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <LL_RCC_GetSysClkSource+0x18>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <LL_RCC_GetAHBPrescaler+0x18>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800

08002ea4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <LL_RCC_PLL_GetMainSource+0x18>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <LL_RCC_PLL_GetN+0x18>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40023800 	.word	0x40023800

08002edc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <LL_RCC_PLL_GetP+0x18>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002efc:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <LL_RCC_PLL_GetDivider+0x18>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f1c:	f000 f820 	bl	8002f60 <RCC_GetSystemClockFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f840 	bl	8002fb0 <RCC_GetHCLKClockFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f84e 	bl	8002fdc <RCC_GetPCLK1ClockFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f85a 	bl	8003004 <RCC_GetPCLK2ClockFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60da      	str	r2, [r3, #12]
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002f6a:	f7ff ff63 	bl	8002e34 <LL_RCC_GetSysClkSource>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d00c      	beq.n	8002f8e <RCC_GetSystemClockFreq+0x2e>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d80f      	bhi.n	8002f98 <RCC_GetSystemClockFreq+0x38>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <RCC_GetSystemClockFreq+0x22>
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d003      	beq.n	8002f88 <RCC_GetSystemClockFreq+0x28>
 8002f80:	e00a      	b.n	8002f98 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002f82:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <RCC_GetSystemClockFreq+0x48>)
 8002f84:	607b      	str	r3, [r7, #4]
      break;
 8002f86:	e00a      	b.n	8002f9e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002f88:	4b08      	ldr	r3, [pc, #32]	@ (8002fac <RCC_GetSystemClockFreq+0x4c>)
 8002f8a:	607b      	str	r3, [r7, #4]
      break;
 8002f8c:	e007      	b.n	8002f9e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002f8e:	2008      	movs	r0, #8
 8002f90:	f000 f84c 	bl	800302c <RCC_PLL_GetFreqDomain_SYS>
 8002f94:	6078      	str	r0, [r7, #4]
      break;
 8002f96:	e002      	b.n	8002f9e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <RCC_GetSystemClockFreq+0x48>)
 8002f9a:	607b      	str	r3, [r7, #4]
      break;
 8002f9c:	bf00      	nop
  }

  return frequency;
 8002f9e:	687b      	ldr	r3, [r7, #4]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002fb8:	f7ff ff4a 	bl	8002e50 <LL_RCC_GetAHBPrescaler>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <RCC_GetHCLKClockFreq+0x28>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	40d3      	lsrs	r3, r2
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	080036e8 	.word	0x080036e8

08002fdc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002fe4:	f7ff ff42 	bl	8002e6c <LL_RCC_GetAPB1Prescaler>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	0a9b      	lsrs	r3, r3, #10
 8002fec:	4a04      	ldr	r2, [pc, #16]	@ (8003000 <RCC_GetPCLK1ClockFreq+0x24>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	40d3      	lsrs	r3, r2
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	080036f8 	.word	0x080036f8

08003004 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800300c:	f7ff ff3c 	bl	8002e88 <LL_RCC_GetAPB2Prescaler>
 8003010:	4603      	mov	r3, r0
 8003012:	0b5b      	lsrs	r3, r3, #13
 8003014:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <RCC_GetPCLK2ClockFreq+0x24>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	40d3      	lsrs	r3, r2
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	080036f8 	.word	0x080036f8

0800302c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003040:	f7ff ff30 	bl	8002ea4 <LL_RCC_PLL_GetMainSource>
 8003044:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003052:	d003      	beq.n	800305c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003054:	e005      	b.n	8003062 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	e005      	b.n	8003068 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800305e:	617b      	str	r3, [r7, #20]
      break;
 8003060:	e002      	b.n	8003068 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003062:	4b0f      	ldr	r3, [pc, #60]	@ (80030a0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003064:	617b      	str	r3, [r7, #20]
      break;
 8003066:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b08      	cmp	r3, #8
 800306c:	d113      	bne.n	8003096 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800306e:	f7ff ff43 	bl	8002ef8 <LL_RCC_PLL_GetDivider>
 8003072:	4602      	mov	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fbb3 f4f2 	udiv	r4, r3, r2
 800307a:	f7ff ff21 	bl	8002ec0 <LL_RCC_PLL_GetN>
 800307e:	4603      	mov	r3, r0
 8003080:	fb03 f404 	mul.w	r4, r3, r4
 8003084:	f7ff ff2a 	bl	8002edc <LL_RCC_PLL_GetP>
 8003088:	4603      	mov	r3, r0
 800308a:	0c1b      	lsrs	r3, r3, #16
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fbb4 f3f3 	udiv	r3, r4, r3
 8003094:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003096:	693b      	ldr	r3, [r7, #16]
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	007a1200 	.word	0x007a1200

080030a8 <LL_USART_IsEnabled>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_USART_SetStopBitsLength>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_USART_SetHWFlowCtrl>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	615a      	str	r2, [r3, #20]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_USART_SetBaudRate>:
{
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b0c0      	sub	sp, #256	@ 0x100
 8003122:	af00      	add	r7, sp, #0
 8003124:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003128:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800312c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003130:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800313c:	f040 810c 	bne.w	8003358 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003144:	2200      	movs	r2, #0
 8003146:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800314a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800314e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003152:	4622      	mov	r2, r4
 8003154:	462b      	mov	r3, r5
 8003156:	1891      	adds	r1, r2, r2
 8003158:	6639      	str	r1, [r7, #96]	@ 0x60
 800315a:	415b      	adcs	r3, r3
 800315c:	667b      	str	r3, [r7, #100]	@ 0x64
 800315e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003162:	4621      	mov	r1, r4
 8003164:	eb12 0801 	adds.w	r8, r2, r1
 8003168:	4629      	mov	r1, r5
 800316a:	eb43 0901 	adc.w	r9, r3, r1
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800317e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003182:	4690      	mov	r8, r2
 8003184:	4699      	mov	r9, r3
 8003186:	4623      	mov	r3, r4
 8003188:	eb18 0303 	adds.w	r3, r8, r3
 800318c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003190:	462b      	mov	r3, r5
 8003192:	eb49 0303 	adc.w	r3, r9, r3
 8003196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800319a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800319e:	2200      	movs	r2, #0
 80031a0:	469a      	mov	sl, r3
 80031a2:	4693      	mov	fp, r2
 80031a4:	eb1a 030a 	adds.w	r3, sl, sl
 80031a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031aa:	eb4b 030b 	adc.w	r3, fp, fp
 80031ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031b8:	f7fd f806 	bl	80001c8 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4b64      	ldr	r3, [pc, #400]	@ (8003354 <LL_USART_SetBaudRate+0x238>)
 80031c2:	fba3 2302 	umull	r2, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	b29c      	uxth	r4, r3
 80031ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031d8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031dc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80031e0:	4642      	mov	r2, r8
 80031e2:	464b      	mov	r3, r9
 80031e4:	1891      	adds	r1, r2, r2
 80031e6:	6539      	str	r1, [r7, #80]	@ 0x50
 80031e8:	415b      	adcs	r3, r3
 80031ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80031ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031f0:	4641      	mov	r1, r8
 80031f2:	1851      	adds	r1, r2, r1
 80031f4:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031f6:	4649      	mov	r1, r9
 80031f8:	414b      	adcs	r3, r1
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003208:	4659      	mov	r1, fp
 800320a:	00cb      	lsls	r3, r1, #3
 800320c:	4651      	mov	r1, sl
 800320e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003212:	4651      	mov	r1, sl
 8003214:	00ca      	lsls	r2, r1, #3
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	4603      	mov	r3, r0
 800321c:	4642      	mov	r2, r8
 800321e:	189b      	adds	r3, r3, r2
 8003220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003224:	464b      	mov	r3, r9
 8003226:	460a      	mov	r2, r1
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003230:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800323a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800323e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003242:	460b      	mov	r3, r1
 8003244:	18db      	adds	r3, r3, r3
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40
 8003248:	4613      	mov	r3, r2
 800324a:	eb42 0303 	adc.w	r3, r2, r3
 800324e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003250:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003254:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003258:	f7fc ffb6 	bl	80001c8 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4611      	mov	r1, r2
 8003262:	4b3c      	ldr	r3, [pc, #240]	@ (8003354 <LL_USART_SetBaudRate+0x238>)
 8003264:	fba3 2301 	umull	r2, r3, r3, r1
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	2264      	movs	r2, #100	@ 0x64
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	1acb      	subs	r3, r1, r3
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003278:	4b36      	ldr	r3, [pc, #216]	@ (8003354 <LL_USART_SetBaudRate+0x238>)
 800327a:	fba3 2302 	umull	r2, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	b29b      	uxth	r3, r3
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800328a:	b29b      	uxth	r3, r3
 800328c:	4423      	add	r3, r4
 800328e:	b29c      	uxth	r4, r3
 8003290:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800329a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800329e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80032a2:	4642      	mov	r2, r8
 80032a4:	464b      	mov	r3, r9
 80032a6:	1891      	adds	r1, r2, r2
 80032a8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032aa:	415b      	adcs	r3, r3
 80032ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032b2:	4641      	mov	r1, r8
 80032b4:	1851      	adds	r1, r2, r1
 80032b6:	6339      	str	r1, [r7, #48]	@ 0x30
 80032b8:	4649      	mov	r1, r9
 80032ba:	414b      	adcs	r3, r1
 80032bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032ca:	4659      	mov	r1, fp
 80032cc:	00cb      	lsls	r3, r1, #3
 80032ce:	4651      	mov	r1, sl
 80032d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d4:	4651      	mov	r1, sl
 80032d6:	00ca      	lsls	r2, r1, #3
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	4603      	mov	r3, r0
 80032de:	4642      	mov	r2, r8
 80032e0:	189b      	adds	r3, r3, r2
 80032e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032e6:	464b      	mov	r3, r9
 80032e8:	460a      	mov	r2, r1
 80032ea:	eb42 0303 	adc.w	r3, r2, r3
 80032ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80032f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032fc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003300:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003304:	460b      	mov	r3, r1
 8003306:	18db      	adds	r3, r3, r3
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800330a:	4613      	mov	r3, r2
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003316:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800331a:	f7fc ff55 	bl	80001c8 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <LL_USART_SetBaudRate+0x238>)
 8003324:	fba3 1302 	umull	r1, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2164      	movs	r1, #100	@ 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	3332      	adds	r3, #50	@ 0x32
 8003336:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <LL_USART_SetBaudRate+0x238>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	b29b      	uxth	r3, r3
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	b29b      	uxth	r3, r3
 8003346:	4423      	add	r3, r4
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003350:	609a      	str	r2, [r3, #8]
}
 8003352:	e108      	b.n	8003566 <LL_USART_SetBaudRate+0x44a>
 8003354:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800335c:	2200      	movs	r2, #0
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003362:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003366:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800336a:	4642      	mov	r2, r8
 800336c:	464b      	mov	r3, r9
 800336e:	1891      	adds	r1, r2, r2
 8003370:	6239      	str	r1, [r7, #32]
 8003372:	415b      	adcs	r3, r3
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
 8003376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800337a:	4641      	mov	r1, r8
 800337c:	1854      	adds	r4, r2, r1
 800337e:	4649      	mov	r1, r9
 8003380:	eb43 0501 	adc.w	r5, r3, r1
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	00eb      	lsls	r3, r5, #3
 800338e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003392:	00e2      	lsls	r2, r4, #3
 8003394:	4614      	mov	r4, r2
 8003396:	461d      	mov	r5, r3
 8003398:	4643      	mov	r3, r8
 800339a:	18e3      	adds	r3, r4, r3
 800339c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033a0:	464b      	mov	r3, r9
 80033a2:	eb45 0303 	adc.w	r3, r5, r3
 80033a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80033aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80033c4:	4629      	mov	r1, r5
 80033c6:	008b      	lsls	r3, r1, #2
 80033c8:	4621      	mov	r1, r4
 80033ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ce:	4621      	mov	r1, r4
 80033d0:	008a      	lsls	r2, r1, #2
 80033d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80033d6:	f7fc fef7 	bl	80001c8 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <LL_USART_SetBaudRate+0x458>)
 80033e0:	fba3 2302 	umull	r2, r3, r3, r2
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	b29c      	uxth	r4, r3
 80033ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033fa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80033fe:	4642      	mov	r2, r8
 8003400:	464b      	mov	r3, r9
 8003402:	1891      	adds	r1, r2, r2
 8003404:	61b9      	str	r1, [r7, #24]
 8003406:	415b      	adcs	r3, r3
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340e:	4641      	mov	r1, r8
 8003410:	1851      	adds	r1, r2, r1
 8003412:	6139      	str	r1, [r7, #16]
 8003414:	4649      	mov	r1, r9
 8003416:	414b      	adcs	r3, r1
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003426:	4659      	mov	r1, fp
 8003428:	00cb      	lsls	r3, r1, #3
 800342a:	4651      	mov	r1, sl
 800342c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003430:	4651      	mov	r1, sl
 8003432:	00ca      	lsls	r2, r1, #3
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	4603      	mov	r3, r0
 800343a:	4642      	mov	r2, r8
 800343c:	189b      	adds	r3, r3, r2
 800343e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003442:	464b      	mov	r3, r9
 8003444:	460a      	mov	r2, r1
 8003446:	eb42 0303 	adc.w	r3, r2, r3
 800344a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800344e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003458:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003468:	4649      	mov	r1, r9
 800346a:	008b      	lsls	r3, r1, #2
 800346c:	4641      	mov	r1, r8
 800346e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003472:	4641      	mov	r1, r8
 8003474:	008a      	lsls	r2, r1, #2
 8003476:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800347a:	f7fc fea5 	bl	80001c8 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4611      	mov	r1, r2
 8003484:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <LL_USART_SetBaudRate+0x458>)
 8003486:	fba3 2301 	umull	r2, r3, r3, r1
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2264      	movs	r2, #100	@ 0x64
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	1acb      	subs	r3, r1, r3
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	3332      	adds	r3, #50	@ 0x32
 8003498:	4a36      	ldr	r2, [pc, #216]	@ (8003574 <LL_USART_SetBaudRate+0x458>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4423      	add	r3, r4
 80034aa:	b29c      	uxth	r4, r3
 80034ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034b0:	2200      	movs	r2, #0
 80034b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034b4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034b6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034ba:	4642      	mov	r2, r8
 80034bc:	464b      	mov	r3, r9
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ca:	4641      	mov	r1, r8
 80034cc:	1851      	adds	r1, r2, r1
 80034ce:	6039      	str	r1, [r7, #0]
 80034d0:	4649      	mov	r1, r9
 80034d2:	414b      	adcs	r3, r1
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034e2:	4659      	mov	r1, fp
 80034e4:	00cb      	lsls	r3, r1, #3
 80034e6:	4651      	mov	r1, sl
 80034e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ec:	4651      	mov	r1, sl
 80034ee:	00ca      	lsls	r2, r1, #3
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	4603      	mov	r3, r0
 80034f6:	4642      	mov	r2, r8
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	677b      	str	r3, [r7, #116]	@ 0x74
 8003506:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800350a:	2200      	movs	r2, #0
 800350c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800350e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800351c:	4649      	mov	r1, r9
 800351e:	008b      	lsls	r3, r1, #2
 8003520:	4641      	mov	r1, r8
 8003522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003526:	4641      	mov	r1, r8
 8003528:	008a      	lsls	r2, r1, #2
 800352a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800352e:	f7fc fe4b 	bl	80001c8 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <LL_USART_SetBaudRate+0x458>)
 8003538:	fba3 1302 	umull	r1, r3, r3, r2
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	2164      	movs	r1, #100	@ 0x64
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	3332      	adds	r3, #50	@ 0x32
 800354a:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <LL_USART_SetBaudRate+0x458>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	b29b      	uxth	r3, r3
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	b29b      	uxth	r3, r3
 800355a:	4423      	add	r3, r4
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003564:	609a      	str	r2, [r3, #8]
}
 8003566:	bf00      	nop
 8003568:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	51eb851f 	.word	0x51eb851f

08003578 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fd8c 	bl	80030a8 <LL_USART_IsEnabled>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d15e      	bne.n	8003654 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800359e:	f023 030c 	bic.w	r3, r3, #12
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	6851      	ldr	r1, [r2, #4]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	6912      	ldr	r2, [r2, #16]
 80035b0:	4311      	orrs	r1, r2
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	6992      	ldr	r2, [r2, #24]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fd83 	bl	80030d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fd90 	bl	80030f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fc9a 	bl	8002f14 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <LL_USART_Init+0xe8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d102      	bne.n	80035ee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e021      	b.n	8003632 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <LL_USART_Init+0xec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d102      	bne.n	80035fc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e01a      	b.n	8003632 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <LL_USART_Init+0xf0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d102      	bne.n	800360a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e013      	b.n	8003632 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a17      	ldr	r2, [pc, #92]	@ (800366c <LL_USART_Init+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d102      	bne.n	8003618 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e00c      	b.n	8003632 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <LL_USART_Init+0xf8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e005      	b.n	8003632 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a12      	ldr	r2, [pc, #72]	@ (8003674 <LL_USART_Init+0xfc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003640:	2300      	movs	r3, #0
 8003642:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff fd64 	bl	800311c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003654:	7ffb      	ldrb	r3, [r7, #31]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40011000 	.word	0x40011000
 8003664:	40004400 	.word	0x40004400
 8003668:	40004800 	.word	0x40004800
 800366c:	40011400 	.word	0x40011400
 8003670:	40004c00 	.word	0x40004c00
 8003674:	40005000 	.word	0x40005000

08003678 <memset>:
 8003678:	4402      	add	r2, r0
 800367a:	4603      	mov	r3, r0
 800367c:	4293      	cmp	r3, r2
 800367e:	d100      	bne.n	8003682 <memset+0xa>
 8003680:	4770      	bx	lr
 8003682:	f803 1b01 	strb.w	r1, [r3], #1
 8003686:	e7f9      	b.n	800367c <memset+0x4>

08003688 <__libc_init_array>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4d0d      	ldr	r5, [pc, #52]	@ (80036c0 <__libc_init_array+0x38>)
 800368c:	4c0d      	ldr	r4, [pc, #52]	@ (80036c4 <__libc_init_array+0x3c>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	2600      	movs	r6, #0
 8003694:	42a6      	cmp	r6, r4
 8003696:	d109      	bne.n	80036ac <__libc_init_array+0x24>
 8003698:	4d0b      	ldr	r5, [pc, #44]	@ (80036c8 <__libc_init_array+0x40>)
 800369a:	4c0c      	ldr	r4, [pc, #48]	@ (80036cc <__libc_init_array+0x44>)
 800369c:	f000 f818 	bl	80036d0 <_init>
 80036a0:	1b64      	subs	r4, r4, r5
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	2600      	movs	r6, #0
 80036a6:	42a6      	cmp	r6, r4
 80036a8:	d105      	bne.n	80036b6 <__libc_init_array+0x2e>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b0:	4798      	blx	r3
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7ee      	b.n	8003694 <__libc_init_array+0xc>
 80036b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ba:	4798      	blx	r3
 80036bc:	3601      	adds	r6, #1
 80036be:	e7f2      	b.n	80036a6 <__libc_init_array+0x1e>
 80036c0:	08003708 	.word	0x08003708
 80036c4:	08003708 	.word	0x08003708
 80036c8:	08003708 	.word	0x08003708
 80036cc:	0800370c 	.word	0x0800370c

080036d0 <_init>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr

080036dc <_fini>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr
